#include <cassert>
#include <cstdlib>

namespace main_savitch_12A
{
	template <class RecordType>
	const std::size_t table<RecordType>::CAPACITY; template <class RecordType>
	const int table<RecordType>::NEVER_USED; template <class RecordType>
	const int table<RecordType>::PREVIOUSLY_USED;

	template <class RecordType>
	table<RecordType>::table()
	// Library facilities used: cstdlib 
	{
        std::size_t i;
		used = 0;
		for (i = 0; i < CAPACITY; ++i)
			data[i].key = NEVER_USED; // Indicates a spot that’s never been used.
	}

	template <class RecordType>
	void table<RecordType>::insert(const RecordType& entry)
	{
		bool already_present;
		std::size_t index;

		assert(entry.key >= 0);

		find_index(entry.key, already_present, index);

		if(!already_present)
		{
			assert(size() < CAPACITY);
			index = hash(entry.key);
			while (!is_vacant(index))
			{
				index = next_index(entry.key, index);
			}
			++used;
		}
		data[index] = entry;
	}

	template <class RecordType>
	void table<RecordType>::remove(int key)
	{
		bool found;
		std::size_t index;

		assert(key >= 0);

		find_index(key, found, index);
		if (found)
		{
			data[index].key = PREVIOUSLY_USED;
			--used;
		}
	}

	template <class RecordType>
	bool table<RecordType>::is_present(int key) const
	{
		bool found;
		std::size_t index;
		assert(key >= 0);
		find_index(key, found, index);
		return found;
	}

	template <class RecordType>
	void table<RecordType>::find(int key, bool& found, RecordType& result) const
	{
		std::size_t index;
		assert(key >= 0);
		find_index(key, found, index);
		if (found)
		{
			result = data[index];
		}
	}

	template <class RecordType>
	inline std::size_t table<RecordType>::hash(int key) const
	// Precondition: The return value is the hash value for the given key.
	{
		return (key % CAPACITY);
	}

	template <class RecordType>
	inline std::size_t table<RecordType>::next_index(int key, std::size_t index) const
	// Precondition: index < CAPACITY.
	// Postcondition: The return value is either index+1 (if this is less than CAPACITY) or zero
	// (if index+1 equals CAPACITY).
	{
		return ((index + hash(key)) % CAPACITY);
	}

	template <class RecordType>
	void table<RecordType>::find_index(int key, bool& found, std::size_t& i) const
	// Precondition: key >= 0.
	// Postcondition: If a record is in the table with the specified key, then found is true and index
	// is set so that data[index].key is the specified key. Otherwise found is false, and i is garbage.
	{
		std::size_t count;

		count = 0;
		i = hash(key);
		while ((count < CAPACITY) && (data[i].key != NEVER_USED) && (data[i].key != key))
		{
			++count;
			i = next_index(key, i);
		}
		found = (data[i].key == key);
	}

	template <class RecordType>
	inline bool table<RecordType>::never_used(std::size_t index) const
	{
		return (data[index].key == NEVER_USED);
	}

	template <class RecordType>
	inline bool table<RecordType>::is_vacant(std::size_t index) const
	{
		return (data[index].key < 0);
	}
}